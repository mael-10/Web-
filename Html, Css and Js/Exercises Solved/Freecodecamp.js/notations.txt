.push add a varible on the array on final 
.pop remove the final value of array and store it

.shift - remove first element of array 
.unshifted - add first element of array

.includes() determine if a element is inside an array

Math.random() > .2 //New things
hit > 0 ? hit : 0; //New things

Iterar é o processo de percorrer uma lista ou array. 

Incialização de Variáveis

let count = 0; // Para contadores ou somas
let name = ""; // Para strings
let items = []; // Para arrays
let isActive = false; // Para valores booleanos  
let options = {}; // Objeto vazio

let cachorro = ''; 
 
cachorro = 3;
cachorro += 6; 

output 36

------------------------//----------------------------------------------

DOM - Document Object Model 

document represents your entire html document. Ex: 

document.querySelector("h2"); -- That represents you html and you are selecting your h2. Its inside your html document. 

OBJECTS JS: 

- if a variable isnt be reassigned its a better practise use const. This will tell JavaScript to throw an error if you accidentally reassign it. 

- Objects are similar to arrays, except because arrays use index to access a value. At point in Objects we use properties to access value on it. 
- properties consist in key and value: key is the name o properties and value is the data stored in property. 

const cat = {
  name: "Whiskers"
}

if the key name has a space between words, use double quotes: Just looks like that:

const spaceObj = {
  "Space Name": "Kirk",
};

How to access an Object 

cat.name = Use dot for access an object when it doesnt have any space 
cat["Space Name"] = Use brackets when properties has space 

'bracket notation' its know as passing an index to access arrays.

-------------------------------//---------------------------------------------------------------

//Anonymous function is ideal for unique case. It is most used in callback function
//It is called spread. With spread you copy all elements of array to another.
//The map() method is used to iterate through an array and return a new array. It's helpful when you want to create a new array based on the values of an existing.

---------------------------------------------//-----------------------

As optional chaining serve para verficar se um valor é uma forma segura de acessar "propiedades aninhadas".

PROPIEDADES ANINHADAS é usado quando temos um objeto dentro de um objeto. É um maneira de organizer dados de maneira mais organizadas. Ex:

const usurio {
  nome: Joao, 
  endereco {
    rua: "Avenida do Cabuloso",
    numero: 100,
    cidade: São Paulo. 
    CEP: 05999
  }, 
  idade: 18
}

Neste exemplo "endereco" é uma propriedade aninhada de usuario. Para acessar alguma propiedade: 

console.log(usuario.endereco.rua); //Avenida do Cabuloso

Optional chaining permite verficar se aquela propiedade aninhada existe. Se não existir, o código não gera erro e sim um "undefined"

console.log(usuario.endereco?.rua);


-------------------------------------//------------------------------

const array1 = [1, 4, 9, 16];

// Pass a function to map
const map1 = array1.map((x) => x * 2);

console.log(map1); // [2, 4, 9, 16]

Ele intera sobre cada elemento, assim fazendo uma manipulação no seus elementos