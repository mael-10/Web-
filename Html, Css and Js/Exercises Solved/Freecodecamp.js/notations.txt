.push add a varible on the array on final 
.pop remove the final value of array and store it

.shift - remove first element of array 
.unshifted - add first element of array

.includes() determine if a element is inside an array

Math.random() > .2 //New things
hit > 0 ? hit : 0; //New things

Iterar é o processo de percorrer uma lista ou array. 

Incialização de Variáveis

let count = 0; // Para contadores ou somas
let name = ""; // Para strings
let items = []; // Para arrays
let isActive = false; // Para valores booleanos  
let options = {}; // Objeto vazio

let cachorro = ''; 
 
cachorro = 3;
cachorro += 6; 

output 36

------------------------//----------------------------------------------

DOM - Document Object Model 

document represents your entire html document. Ex: 

document.querySelector("h2"); -- That represents you html and you are selecting your h2. Its inside your html document. 

--------------------------//--------------------------------------------

OBJECTS JS: 

- if a variable isnt be reassigned its a better practise use const. This will tell JavaScript to throw an error if you accidentally reassign it. 

- Objects are similar to arrays, except because arrays use index to access a value. At point in Objects we use properties to access value on it. 
- properties consist in key and value: key is the name o properties and value is the data stored in property. 

const cat = {
  name: "Whiskers"
}

if the key name has a space between words, use double quotes: Just looks like that:

const spaceObj = {
  "Space Name": "Kirk",
};

How to access an Object 

cat.name = Use dot for access an object when it doesnt have any space 
cat["Space Name"] = Use brackets when properties has space 

'bracket notation' its know as passing an index to access arrays.

-------------------------------//---------------------------------------------------------------

//Anonymous function is ideal for unique case. It is most used in callback function
//It is called spread. With spread you copy all elements of array to another.
//The map() method is used to iterate through an array and return a new array. It's helpful when you want to create a new array based on the values of an existing.

------------------------------//--------------------------------------------------------

A função anonima é uma função sem nome, onde seu uso é indicado quando precisar usa-lá somente uma vez.

Função anonima: 

const ola = function(){
  console.log("Olá mundo");
}

ola(); //Olá mundo


A callback function é uma função passada como outro argumento para uma função. As callbacks podem ser usadas em métodos como o .map() e o .sort()
As callback podem usar tanto funções declaradas como anônimas.


callback com função anonima: 

function love(you){
  console.log("I love.. ");
  you(); //Chamamos o parâmetro como função pois o parametro é nesse contexto uma função.
}

love(function(){
  console.log("you");
});

Callback com função nomeada

function you(){
  console.log("you");
}

function love(voce){
  console.log("I love... ");
  voce();
}

love(you);

Arrow function

Arrow function é uma maneria simplificada da função anonima

const anonima = () => {
  //a função aqui
}


Da mesma forma pode ser usada em .map e .sort, que é o seu uso mais comum

---------------------------------------------//-----------------------

As optional chaining serve para verficar se um valor é uma forma segura de acessar "propiedades aninhadas".

PROPIEDADES ANINHADAS é usado quando temos um objeto dentro de um objeto. É um maneira de organizer dados de maneira mais organizadas. Ex:

const usurio {
  nome: Joao, 
  endereco {
    rua: "Avenida do Cabuloso",
    numero: 100,
    cidade: São Paulo. 
    CEP: 05999
  }, 
  idade: 18
}

Neste exemplo "endereco" é uma propriedade aninhada de usuario. Para acessar alguma propiedade: 

console.log(usuario.endereco.rua); //Avenida do Cabuloso

Optional chaining permite verficar se aquela propiedade aninhada existe. Se não existir, o código não gera erro e sim um "undefined"

console.log(usuario.endereco?.rua);


-------------------------------------//------------------------------

const array1 = [1, 4, 9, 16];

// Pass a function to map
const map1 = array1.map((x) => x * 2);

console.log(map1); // [2, 4, 9, 16]

Ele itera sobre cada elemento, assim fazendo uma manipulação no seus elementos

--------------------------------------//--------------------------------------

o .sort() coloca todos os elmentos de um array em orden alfabética

name =  [Thiago, Matheus, Ana];

name.short() //[Ana, Matheus, Thiago]

Para colocar um object em ordem, tenho que transformar esse objeto em array.
Para ordernar é preciso também que tenha uma string no array. Caso contrario é necessário ter uma estrutura de comparação caso deseje ordernar objetos.
O método .short ele aceita callbacks function para fazer comparaçãoes lógicas.

const fruits = [
  { name: "Apples", price: 0.99 },
  { name: "Blueberries", price: 1.49 },
  { name: "Grapes", price: 2.99 },
];

fruits.sort((a, b) => {
  if (a.name < b.name) {
    return -1;
  }

  if (a.name > b.name) {
    return 1;
  }

  return 0;
});

O .short() em suas comparações lógicas, precisa de um valor de retorno.
Quando se compara uma string com outra, o .short compara letra por letra para verficar qual é a quem te precedencia maior para a ordem alfabética.


"Apples" é menor do que  "Bananas" porque "A" vem antes de "B" no alfabeto. Então retornamos -1, caso contrario retornamos 1.
E sim for igual, então retorna 0 e termina a função para iterar o próximo objeto.
Com o valor de retorno onde vai permitir o metodo saber à organizar os objetos.

Assim como o map, o short itera sobre todas as posições do array para verificar qual é a ordem alfabética.

-----------------------//------------------------------

O método .find() ele encontra o elemento do array que setizfaz a condição usando as funções callbacks. Ex:

const numbers = [10, 20, 30, 40, 50];

// Find the first number greater than 25
const foundNumber = numbers.find((number) => number > 25);
console.log(foundNumber); // Output: 30